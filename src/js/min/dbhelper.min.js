let awaitingReviewId=0;class DBHelper{static get DATABASE_URL(){const port=1337;return"http://localhost:1337"}static fetchRestaurantsFromDb(callback){if(!("indexedDB"in window)){let xhr=new XMLHttpRequest;return xhr.open("GET",`${DBHelper.DATABASE_URL}/restaurants`),xhr.onload=(()=>{if(200===xhr.status)callback(null,JSON.parse(xhr.responseText));else{const error=`Error (fetchRestaurantsFromDb): ${xhr.status}`;callback(error,null)}}),xhr.send()}idb.open("restaurantsDb",1,upgradeDb=>{upgradeDb.createObjectStore("restaurantsDb",{keyPath:"id"})}).then(db=>{var tx,dbStore;db.transaction("restaurantsDb","readonly").objectStore("restaurantsDb").getAll().then(DataFromIdb=>{if(DataFromIdb&&DataFromIdb.length<1){let xhr=new XMLHttpRequest;xhr.open("GET",`${DBHelper.DATABASE_URL}/restaurants`),xhr.onload=(()=>{if(200===xhr.status){var tx,dbStore=db.transaction("restaurantsDb","readwrite").objectStore("restaurantsDb");const json=JSON.parse(xhr.responseText);json.forEach(element=>{dbStore.put(element)}),dbStore.getAll().then(restaurants=>{callback(null,restaurants)})}else{const error=`Error (fetchRestaurantsFromDb): ${xhr.status}`;callback(error,null)}}),xhr.send()}else callback(null,DataFromIdb)})})}static fetchReviewsFromDb(callback){"indexedDB"in window?idb.open("reviewsDb",1,upgradeDb=>{upgradeDb.createObjectStore("reviewsDb",{keyPath:"id"})}).then(db=>{var tx,dbStore;db.transaction("reviewsDb","readonly").objectStore("reviewsDb").getAll().then(DataFromIdb=>{DataFromIdb&&DataFromIdb.length<1?fetch(`${DBHelper.DATABASE_URL}/reviews`).then(response=>response.json()).then(reviews=>{var tx,dbStore=db.transaction("reviewsDb","readwrite").objectStore("reviewsDb");reviews.forEach(review=>{dbStore.put(review)}),dbStore.getAll().then(reviews=>{callback(null,reviews)})}).catch(error=>{callback(error,null)}):callback(null,DataFromIdb)})}):fetch(`${DBHelper.DATABASE_URL}/reviews`).then(response=>response.json()).then(reviews=>{callback(null,reviews)}).catch(error=>{callback(error,null)})}static fetchRestaurantById(id,callback){DBHelper.fetchRestaurantsFromDb((error,restaurants)=>{if(error)callback(error,null);else{const restaurant=restaurants.find(r=>r.id==id);restaurant?callback(null,restaurant):callback("Restaurant does not exist",null)}})}static fetchReviewsByRestaurantId(id,callback){DBHelper.fetchReviewsFromDb((error,reviewss)=>{if(error)callback(error,null);else{const reviews=reviewss.filter(r=>r.restaurant_id==id);reviews?callback(null,reviews):callback("Restaurant does not have reviews yet",null)}})}static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurantsFromDb((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results)}})}static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurantsFromDb((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results)}})}static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,favourite,callback){DBHelper.fetchRestaurantsFromDb((error,restaurants)=>{if(error)callback(error,null);else{let results=restaurants;"all"!=cuisine&&(results=results.filter(r=>r.cuisine_type==cuisine)),"all"!=neighborhood&&(results=results.filter(r=>r.neighborhood==neighborhood)),1==favourite&&(results=results.filter(r=>"true"==r.is_favorite)),callback(null,results)}})}static fetchNeighborhoods(callback){DBHelper.fetchRestaurantsFromDb((error,restaurants)=>{if(error)callback(error,null);else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood),uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);callback(null,uniqueNeighborhoods)}})}static fetchCuisines(callback){DBHelper.fetchRestaurantsFromDb((error,restaurants)=>{if(error)callback(error,null);else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type),uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);callback(null,uniqueCuisines)}})}static saveReviewFromForm(e,callback){e.preventDefault();let name=document.getElementById("review-name").value,rating=parseInt(document.querySelector('input[name="rating"]:checked').value),comments=document.getElementById("review-text").value,restaurant_id=parseInt(getParameterByName("id")),updatedAt=new Date,body=new FormData;body.append("restaurant_id",restaurant_id),body.append("name",name),body.append("rating",rating),body.append("comments",comments),fetch(`${DBHelper.DATABASE_URL}/reviews`,{method:"POST",body:body}).then(response=>response.json()).then(review=>{"indexedDB"in window&&idb.open("reviewsDb",1,upgradeDb=>{upgradeDb.createObjectStore("reviewsDb",{keyPath:"id"})}).then(db=>{var tx,dbStore;db.transaction("reviewsDb","readwrite").objectStore("reviewsDb").put(review),callback(null,review)})}).catch(()=>{const awaitingReview={id:awaitingReviewId+1,restaurant_id:restaurant_id,name:name,rating:rating,comments:comments,updatedAt:updatedAt,createdAt:updatedAt};if(awaitingReviewId=awaitingReview.id,"indexedDB"in window)idb.open("awaitingReviews",1,upgradeDb=>{upgradeDb.createObjectStore("awaitingReviews",{keyPath:"id"})}).then(db=>{var tx,dbStore;db.transaction("awaitingReviews","readwrite").objectStore("awaitingReviews").put(awaitingReview),callback(null,awaitingReview)});else{const error="Error (saveReviewFromForm)";callback(error,null)}})}static saveAwaitingReviewFromForm(){"indexedDB"in window&&idb.open("awaitingReviews",1,upgradeDb=>{upgradeDb.createObjectStore("awaitingReviews",{keyPath:"id"})}).then(db=>{var tx,dbStore=db.transaction("awaitingReviews","readwrite").objectStore("awaitingReviews");dbStore.getAll().then(DataFromIdb=>{DataFromIdb&&DataFromIdb.length>0&&DataFromIdb.forEach(awaitingReview=>{let date=new Date,restaurant_id=awaitingReview.restaurant_id,name=awaitingReview.name,rating=awaitingReview.rating,comments=awaitingReview.comments,dateComment=date.toDateString(),body=new FormData;body.append("restaurant_id",restaurant_id),body.append("name",name),body.append("rating",rating),body.append("date",dateComment),body.append("comments",comments),fetch(`${DBHelper.DATABASE_URL}/reviews`,{method:"POST",body:body}).then(response=>response.json()).then(review=>{"indexedDB"in window&&idb.open("reviewsDb",1,upgradeDbFinal=>{upgradeDbFinal.createObjectStore("reviewsDb",{keyPath:"id"})}).then(dbFinal=>{var txFinal,dbStoreFinal;dbFinal.transaction("reviewsDb","readwrite").objectStore("reviewsDb").put(review)})}).catch(error=>console.log("Error (saveAwaitingReviewFromForm): "+error))})}),dbStore.clear()})}static changeFavorite(id,status){fetch(`${DBHelper.DATABASE_URL}/restaurants/${id}/?is_favorite=${status}`,{method:"PUT"}).then(res=>res.json()).then(data=>{idb.open("restaurantsDb",1,upgradeDb=>{const store=upgradeDb.createObjectStore("restaurantsDb",{keyPath:"id"});store.createIndex("by-id","id")}).then(db=>{if(db){var tx=db.transaction("restaurantsDb","readwrite"),store;return tx.objectStore("restaurantsDb").put(data),tx.complete}return console.log("Error (changeFavorite): ")}).then(location.reload())})}static urlForRestaurant(restaurant){return`./restaurant.min.html?id=${restaurant.id}`}static imageUrlForRestaurant(restaurant){return`/img/${restaurant.photograph}`}static fileNameForRestaurant(restaurant){return restaurant.photograph}static mapMarkerForRestaurant(restaurant,map){const marker=new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:google.maps.Animation.DROP});return marker}}