class DBHelper{static get DATABASE_URL(){const port=1337;return"http://localhost:1337/restaurants"}static openIDB(){return navigator.serviceWorker?idb.open("restaurantDb",1,upgradeDb=>{const store=upgradeDb.createObjectStore("restaurantDb",{keyPath:"id"});store.createIndex("by-id","id")}):Promise.resolve()}static saveToIDB(data){return DBHelper.openIDB().then(db=>{if(!db)return console.log("Something went wrong with db");const tx=db.transaction("restaurantDb","readwrite"),store=tx.objectStore("restaurantDb");return data.forEach(restaurant=>{store.put(restaurant)}),tx.complete})}static addRestaurantsFromAPI(){return fetch(DBHelper.DATABASE_URL).then(function(response){return response.json()}).then(restaurants=>(DBHelper.saveToIDB(restaurants),restaurants))}static getCachedRestaurants(){return DBHelper.openIDB().then(db=>{if(!db)return console.log("Something went wrong with cachedRestaurannts");const store=db.transaction("restaurantDb").objectStore("restaurantDb");return store.getAll()})}static fetchRestaurants(callback){return DBHelper.getCachedRestaurants().then(restaurants=>restaurants.length?Promise.resolve(restaurants):DBHelper.addRestaurantsFromAPI()).then(restaurants=>{callback(null,restaurants)}).catch(error=>{console.log(`Something gone terrible wrong: ${error}`),callback(error,null)})}static fetchRestaurantById(id,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const restaurant=restaurants.find(r=>r.id==id);restaurant?callback(null,restaurant):callback("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results)}})}static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results)}})}static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{let results=restaurants;"all"!=cuisine&&(results=results.filter(r=>r.cuisine_type==cuisine)),"all"!=neighborhood&&(results=results.filter(r=>r.neighborhood==neighborhood)),callback(null,results)}})}static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood),uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);callback(null,uniqueNeighborhoods)}})}static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type),uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);callback(null,uniqueCuisines)}})}static urlForRestaurant(restaurant){return`./restaurant.min.html?id=${restaurant.id}`}static imageUrlForRestaurant(restaurant){return`/img/${restaurant.photograph}`}static fileNameForRestaurant(restaurant){return restaurant.photograph}static mapMarkerForRestaurant(restaurant,map){const marker=new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:google.maps.Animation.DROP});return marker}}